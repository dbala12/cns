percent_male_2016 = (total_votes_2016[gender_code == "M"] / total_votes_2016) * 100
)
total_votes_2024 <- sum(merged_gender_votes$gender_code_2024, na.rm = TRUE)
total_votes_2016 <- sum(merged_gender_votes$gender_code_2016, na.rm = TRUE)
merged_gender_votes <- merged_gender_votes |>
mutate(
percent_2024 = (gender_code_2024 / total_votes_2024) * 100,
percent_2016 = (gender_code_2016 / total_votes_2016) * 100
)
merged_gender_votes
merged_age_votes <- total_votes_age |>
left_join(age_early_voters_2016, by = "gender_code")
merged_age_votes <- total_votes_age |>
left_join(age_early_voters_2016, by = "age_code")
merged_age_votes <- total_votes_age |>
left_join(age_early_voters_2016, by = "age_group")
merged_age_votes <- merged_age_votes |>
rename(
age_code_2024 = total_votes.x,
age_code_2016 = total_votes.y
)
merged_age_votes
total_votes_2024 <- sum(merged_age_votes$age_code_2024, na.rm = TRUE)
total_votes_2016 <- sum(merged_age_votes$age_code_2016, na.rm = TRUE)
merged_age_votes <- merged_age_votes |>
mutate(
percent_2024 = (age_code_2024 / total_votes_2024) * 100,
percent_2016 = (age_code_2016 / total_votes_2016) * 100
)
merged_age_votes
merged_party_votes <- party_votes |>
left_join(party_votes_2016, by = "party_code")
merged_party_votes <- merged_party_votes |>
rename(
party_code_2024 = total_votes.x,
party_code_2016 = total_votes.y
)
merged_party_votes
total_votes_2024 <- sum(merged_party_votes$party_code_2024, na.rm = TRUE)
total_votes_2016 <- sum(merged_party_votes$party_code_2016, na.rm = TRUE)
merged_party_votes <- merged_party_votes |>
mutate(
percent_2024 = (party_code_2024 / total_votes_2024) * 100,
percent_2016 = (party_code_2016 / total_votes_2016) * 100
)
merged_party_votes
View(merged_party_votes)
earlyvoting_raw_data <- read_csv("raw_data_nov_1.csv")
View(earlyvoting_raw_data)
# cleaning function
earlyvoting_raw_data <- earlyvoting_raw_data |>
clean_names()
# Convert from wide to long format for easier aggregation
long_data <- earlyvoting_raw_data |>
pivot_longer(cols = starts_with("day"),
names_to = "day",
values_to = "votes")
# Calculate the total votes per county for each day
votes_per_county_per_day <- long_data |>
group_by(county_name, day) |>
summarize(total_votes = sum(votes, na.rm = TRUE), .groups = 'drop')
# View the results
print(votes_per_county_per_day)
# Load census
census_api_key("6c6f00214ef0eb2cab5b4ff78cf0bd45c520fec3", install=TRUE, overwrite=TRUE)
county_totals<- votes_per_county_per_day |>
group_by(county_name) |>
summarise(total_early_votes = sum(total_votes)) |>
arrange(desc(total_early_votes))
county_totals
census_data_2024 <- get_acs(
geography = "county",
variables ="B01001_026",
year = 2022,
state = "MD",
survey = "acs5"
)
census_data_2024 <- census_data_2024 |>
rename(county_name = NAME, population = estimate)
print(census_data_2024)
census_data_2024 <- census_data_2024 |>
mutate(county_name = if_else(
county_name %in% c("Baltimore City", "Baltimore County"),
county_name,
str_replace(county_name, " County, Maryland", "")
))
census_data_2024
census_data_2024 <- census_data_2024 |>
mutate(county_name = case_when(
county_name == "Baltimore" ~ "Baltimore County",
county_name == "Baltimore city, Maryland" ~ "Baltimore City",
county_name == "St. Mary's" ~ "Saint Mary's",
TRUE ~ county_name
))
census_data_2024
county_pop_vote_early <- county_totals |>
left_join(census_data_2024, by = "county_name")
county_pop_vote_early
county_vote_breakdown_pop <- county_pop_vote_early |>
mutate(votes_per_10000 = (total_early_votes / population) * 10000) |>
arrange(desc(votes_per_10000))
county_vote_breakdown_pop
ggplot(county_vote_breakdown_pop, aes(x = reorder(county_name, votes_per_10000), y = votes_per_10000)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +  # Flip coordinates for better readability
labs(
title = "Early Votes per 10,000 People by County",
x = "County",
y = "Votes per 10,000 People"
) +
theme_minimal()
# Check the structure and column names of the dataset
str(earlyvoting_raw_data)
colnames(earlyvoting_raw_data)
census_data_2024
total_votes_by_county_party <- earlyvoting_raw_data |>
filter(party_code %in% c("DEM", "REP", "UNA")) |>
group_by(county_name, party_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
total_votes_per_capita <- total_votes_by_county_party |>
left_join(census_data_2024, by = "county_name") |>
mutate(votes_per_10000 = (total_votes / population) * 10000) |>
select(county_name, party_code, total_votes, votes_per_10000)
total_votes_per_capita
ggplot(total_votes_per_capita, aes(x = county_name, y = votes_per_10000, fill = party_code)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Early Votes per 10,000 Residents by County and Party",
x = "County",
y = "Votes per 10,000 Residents") +
scale_fill_manual(values = c("DEM" = "blue", "REP" = "red", "UNA" = "darkgreen")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
vote_early_data <- earlyvoting_raw_data |>
mutate(across(starts_with("day"), ~ as.numeric(.)))
total_votes_by_gender <- vote_early_data |>
group_by(gender_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop')
total_votes_by_gender
vote_early_data
total_votes_age <- vote_early_data |>
group_by(age_group) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
total_votes_age
ggplot(total_votes_age, aes(x = reorder(age_group, -total_votes), y = total_votes)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Total Early Votes by Age Group",
x = "Age Group",
y = "Total Votes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
party_votes <- vote_early_data |>
group_by(party_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
party_votes
ggplot(party_votes, aes(x = reorder(party_code, -total_votes), y = total_votes)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(title = "Total Early Votes by Party",
x = "Party Code",
y = "Total Votes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
early_votes_2016 <- read_csv("PG16 EarlyVoting RAW data.csv")
early_votes_2016
early_votes_2016 <- early_votes_2016 |>
clean_names()
early_votes_2016
long_data <- early_votes_2016 |>
pivot_longer(cols = starts_with("day"),
names_to = "day",
values_to = "votes")
# Calculate the total votes per county for each day
early_votes_county_day_2016 <- long_data |>
group_by(county_name, day) |>
summarize(total_votes = sum(votes, na.rm = TRUE), .groups = 'drop')
# View the results
print(early_votes_county_day_2016)
county_totals_2016<- early_votes_county_day_2016 |>
group_by(county_name) |>
summarise(total_early_votes = sum(total_votes)) |>
arrange(desc(total_early_votes))
county_totals_2016
census_data_2016 <- get_acs(
geography = "county",
variables = "B01001_026",
year = 2016,
state = "MD",
survey = "acs5"
)
census_data_2016 <- census_data_2016 |>
rename(county_name = NAME, population = estimate)
print(census_data_2016)
census_data_2016 <- census_data_2016 |>
mutate(county_name = if_else(
county_name %in% c("Baltimore City", "Baltimore County"),
county_name,
str_replace(county_name, " County, Maryland", "")
))
census_data_2016
census_data_2016 <- census_data_2016 |>
mutate(county_name = case_when(
county_name == "Baltimore" ~ "Baltimore County",
county_name == "Baltimore city, Maryland" ~ "Baltimore City",
county_name == "St. Mary's" ~ "Saint Mary's",
TRUE ~ county_name
))
census_data_2016
county_pop_2016_early_vote <- county_totals_2016 |>
left_join(census_data_2016, by = "county_name")
county_pop_2016_early_vote
county_2016_pop_vote <- county_pop_2016_early_vote |>
mutate(votes_per_10000 = (total_early_votes / population) * 10000) |>
arrange(desc(votes_per_10000))
county_2016_pop_vote
ggplot(county_2016_pop_vote, aes(x = reorder(county_name, votes_per_10000), y = votes_per_10000)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() +  # Flip coordinates for better readability
labs(
title = "Early Votes per 10,000 People by County",
x = "County",
y = "Votes per 10,000 People"
) +
theme_minimal()
party_county_2016_votes <- early_votes_2016 |>
filter(party_code %in% c("DEM", "REP", "UNA")) |>
group_by(county_name, party_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
total_2016_votes_per_capita <- party_county_2016_votes |>
left_join(census_data_2016, by = "county_name") |>
mutate(votes_per_10000 = (total_votes / population) * 10000) |>
select(county_name, party_code, total_votes, votes_per_10000)
total_2016_votes_per_capita
ggplot(total_2016_votes_per_capita, aes(x = county_name, y = votes_per_10000, fill = party_code)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Early Votes per 10,000 Residents by County and Party in 2016",
x = "County",
y = "Votes per 10,000 Residents") +
scale_fill_manual(values = c("DEM" = "blue", "REP" = "red", "UNA" = "green")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
age_early_voters_2016 <- early_votes_2016 |>
group_by(age_group) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
age_early_voters_2016
ggplot(age_early_voters_2016, aes(x = reorder(age_group, -total_votes), y = total_votes)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Total Early Votes by Age Group in 2016",
x = "Age Group",
y = "Total Votes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
gender_early_voters_2016 <- early_votes_2016 |>
group_by(gender_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop')
gender_early_voters_2016
party_votes_2016 <- early_votes_2016 |>
group_by(party_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
party_votes_2016
ggplot(party_votes_2016, aes(x = reorder(party_code, -total_votes), y = total_votes)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(title = "Total Early Votes by Party in 2016",
x = "Party Code",
y = "Total Votes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
merged_gender_votes <- total_votes_by_gender |>
left_join(gender_early_voters_2016, by = "gender_code")
merged_gender_votes <- merged_gender_votes |>
rename(
gender_code_2024 = total_votes.x,
gender_code_2016 = total_votes.y
)
merged_gender_votes
total_votes_2024 <- sum(merged_gender_votes$gender_code_2024, na.rm = TRUE)
total_votes_2016 <- sum(merged_gender_votes$gender_code_2016, na.rm = TRUE)
merged_gender_votes <- merged_gender_votes |>
mutate(
percent_2024 = (gender_code_2024 / total_votes_2024) * 100,
percent_2016 = (gender_code_2016 / total_votes_2016) * 100
)
merged_gender_votes
merged_age_votes <- total_votes_age |>
left_join(age_early_voters_2016, by = "age_group")
merged_age_votes <- merged_age_votes |>
rename(
age_code_2024 = total_votes.x,
age_code_2016 = total_votes.y
)
merged_age_votes
total_votes_2024 <- sum(merged_age_votes$age_code_2024, na.rm = TRUE)
total_votes_2016 <- sum(merged_age_votes$age_code_2016, na.rm = TRUE)
merged_age_votes <- merged_age_votes |>
mutate(
percent_2024 = (age_code_2024 / total_votes_2024) * 100,
percent_2016 = (age_code_2016 / total_votes_2016) * 100
)
merged_age_votes
merged_party_votes <- party_votes |>
left_join(party_votes_2016, by = "party_code")
merged_party_votes <- merged_party_votes |>
rename(
party_code_2024 = total_votes.x,
party_code_2016 = total_votes.y
)
merged_party_votes
total_votes_2024 <- sum(merged_party_votes$party_code_2024, na.rm = TRUE)
total_votes_2016 <- sum(merged_party_votes$party_code_2016, na.rm = TRUE)
merged_party_votes <- merged_party_votes |>
mutate(
percent_2024 = (party_code_2024 / total_votes_2024) * 100,
percent_2016 = (party_code_2016 / total_votes_2016) * 100
)
merged_party_votes
View(county_pop_2016_early_vote)
View(county_vote_breakdown_pop)
write.csv(county_vote_breakdown_pop, "county_vote_breakdown_pop.csv", row.names = FALSE)
# Group by county and party and calculate total votes per 10,000
total_votes_by_county_party <- earlyvoting_raw_data |>
filter(party_code %in% c("DEM", "REP", "UNA")) |>
group_by(county_name, party_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
# Calculate votes per 10,000 and reshape the data
total_votes_per_capita <- total_votes_by_county_party |>
left_join(census_data_2024, by = "county_name") |>
mutate(votes_per_10000 = (total_votes / population) * 10000) |>
select(county_name, party_code, votes_per_10000) |>
pivot_wider(names_from = party_code, values_from = votes_per_10000, names_prefix = "votes_per_10000_")
# View the reshaped data
total_votes_per_capita
# Group by county and party and calculate total votes per 10,000
total_votes_by_county_party <- earlyvoting_raw_data |>
filter(party_code %in% c("DEM", "REP", "UNA")) |>
group_by(county_name, party_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
# Calculate votes per 10,000 and reshape the data
total_votes_per_capita <- total_votes_by_county_party |>
left_join(census_data_2024, by = "county_name") |>
mutate(votes_per_10000 = (total_votes / population) * 10000) |>
select(county_name, party_code, votes_per_10000) |>
pivot_wider(names_from = party_code, values_from = votes_per_10000, names_prefix = "votes_per_10000_")
# View the reshaped data
total_votes_per_capita
write.csv(total_votes_per_capita, "total_votes_per_capita", row.names = FALSE)
# Group by county and party and calculate total votes per 10,000
total_votes_by_county_party <- earlyvoting_raw_data |>
filter(party_code %in% c("DEM", "REP", "UNA")) |>
group_by(county_name, party_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
# Calculate votes per 10,000 and reshape the data
total_votes_per_capita <- total_votes_by_county_party |>
left_join(census_data_2024, by = "county_name") |>
mutate(votes_per_10000 = (total_votes / population) * 10000) |>
select(county_name, party_code, votes_per_10000) |>
pivot_wider(names_from = party_code, values_from = votes_per_10000, names_prefix = "votes_per_10000_")
# View the reshaped data
total_votes_per_capita
write.csv(total_votes_per_capita, "total_votes_per_capita.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(ggplot2)
library(tidycensus)
early_voting <- read_csv("EarlyVoting RAW data.csv") |>
clean_names()
early_voting <- early_voting |>
rowwise() %>%
mutate(total_votes = sum(c_across(day1:day8), na.rm = TRUE)) %>%
ungroup()
early_voting_grouped <- early_voting |>
group_by(county_name, gender_code, party_code, age_group) %>%
summarize(total_votes_sum = sum(total_votes, na.rm = TRUE)) %>%
ungroup()
early_voting_grouped |>
group_by(county_name) |>
summarise(total_votes = sum(total_votes_sum)) |>
arrange(desc(total_votes))
# Get total population and population 18 and older
adult_pop <- get_acs(geography =  "county",
state = "24",
variables = c(adults_18_plus = "B01001_026"),
year = 2022)
adult_pop <- adult_pop |>
mutate(NAME = case_when(
NAME == "Baltimore County, Maryland" ~ str_replace(NAME, ", Maryland", ""),  # Trim ", Maryland" for Baltimore
TRUE ~ str_replace(NAME, "County, Maryland", "")  # Trim "County, Maryland" for the rest
)) |>
mutate(NAME = str_replace(NAME, "city, Maryland", "City"),  # Correct case sensitivity
NAME = str_replace(NAME, "St.", "Saint")) |>
select(NAME, estimate) |>
rename(county_name = NAME, population = estimate) |>
mutate(county_name = str_trim(county_name))
gender_age <- early_voting_grouped |>
group_by(gender_code, age_group) |>
summarise(total_votes = sum(total_votes_sum)) |>
arrange(desc(total_votes))
gender_party <- early_voting_grouped |>
filter(party_code %in% c("DEM", "REP", "UNA")) |>
group_by(gender_code, party_code) |>
summarise(total_votes = sum(total_votes_sum)) |>
arrange(desc(total_votes))
gender_age_party <- early_voting_grouped |>
filter(party_code %in% c("DEM", "REP", "UNA")) |>
group_by(gender_code, age_group, party_code) |>
summarise(total_votes = sum(total_votes_sum)) |>
arrange(desc(total_votes))
age_party <- early_voting_grouped |>
filter(party_code %in% c("DEM", "REP", "UNA")) |>
group_by(age_group, party_code) |>
summarise(total_votes = sum(total_votes_sum)) |>
arrange(desc(total_votes))
gender_age |>
arrange(desc(total_votes))
gender_party |>
arrange(desc(total_votes))
age_party |>
arrange(desc(total_votes))
ggplot(gender_age, aes(x = age_group, y = total_votes, fill = gender_code)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Counts by Age Group and Gender",
x = "Age Group",
y = "Count") +
theme_minimal()
ggplot(gender_party, aes(x = party_code, y = total_votes, fill = gender_code)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Counts by Party and Gender",
x = "Age Group",
y = "Count") +
theme_minimal()
ggplot(gender_age_party, aes(x = interaction(gender_code, age_group, party_code), y = total_votes, fill = party_code)) +
geom_bar(stat = "identity") +
labs(title = "Counts by Gender, Age, and Party",
x = "Gender-Age-Party Grouping",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotates x-axis labels for readability
ggplot(age_party, aes(x = party_code, y = total_votes, fill = age_group)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Counts by Party and Age",
x = "Age Group",
y = "Count") +
theme_minimal()
age_county <- early_voting_grouped  |>
group_by(age_group, county_name) |>
summarise(total_votes = sum(total_votes_sum)) |>
arrange(desc(total_votes))
gender_party_county <- early_voting_grouped  |>
filter(party_code %in% c("DEM", "REP", "UNA")) |>
group_by(gender_code, party_code, county_name) |>
summarise(total_votes = sum(total_votes_sum)) |>
arrange(desc(total_votes))
age_county <- left_join(age_county, adult_pop, by = "county_name") |>
mutate(per_10k = total_votes/population*10000)
gender_party_county <- left_join(gender_party_county, adult_pop, by = "county_name") |>
mutate(per_10k = total_votes/population*10000)
age_county |>
arrange(desc(per_10k))
gender_party_county |>
arrange(desc(per_10k))
View(gender_party_county)
gender_party_2024 <- vote_early_data |>
group_by(gender_code, party_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
gender_party_2024
gender_party_2024 <- vote_early_data |>
group_by(gender_code, party_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
gender_party_2024
write.csv(gender_party_2024, "gender_party_2024.csv", row.names = FALSE)
# Group by county and party and calculate total votes per 10,000
total_votes_by_county_party <- earlyvoting_raw_data |>
filter(party_code %in% c("DEM", "REP", "UNA")) |>
group_by(county_name, party_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
# Calculate votes per 10,000 and reshape the data
total_votes_per_capita <- total_votes_by_county_party |>
left_join(census_data_2024, by = "county_name") |>
mutate(votes_per_10000 = (total_votes / population) * 10000) |>
select(county_name, party_code, votes_per_10000) |>
pivot_wider(names_from = party_code, values_from = votes_per_10000, names_prefix = "votes_per_10000_") |>
mutate(total_votes_per_10000 = rowSums(across(starts_with("votes_per_10000_")), na.rm = TRUE))
# View the reshaped data
total_votes_per_capita
write.csv(total_votes_per_capita, "total_votes_per_capita.csv", row.names = FALSE)
# Group by county and party and calculate total votes per 10,000
total_votes_by_county_party <- earlyvoting_raw_data |>
filter(party_code %in% c("DEM", "REP", "UNA")) |>
group_by(county_name, party_code) |>
summarise(total_votes = sum(day1, day2, day3, day4, day5, day6, day7, day8, na.rm = TRUE), .groups = 'drop') |>
arrange(desc(total_votes))
# Calculate votes per 10,000 and reshape the data
total_votes_per_capita <- total_votes_by_county_party |>
left_join(census_data_2024, by = "county_name") |>
mutate(votes_per_10000 = (total_votes / population) * 10000) |>
select(county_name, party_code, votes_per_10000) |>
pivot_wider(names_from = party_code, values_from = votes_per_10000, names_prefix = "votes_per_10000_") |>
mutate(total_votes_per_10000 = rowSums(across(starts_with("votes_per_10000_")), na.rm = TRUE)) |>
arrange(desc(total_votes_per_10000))
# View the reshaped data
total_votes_per_capita
write.csv(total_votes_per_capita, "total_votes_per_capita.csv", row.names = FALSE)
