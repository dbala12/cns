md_2023_clean <- md_2023_transposed |>
mutate(state_residence = str_replace_all(state_residence, "_residence", "")) |>
rename(patients_2023 = patients)
md_abortions <- full_join(md_2019_clean, md_2023_clean, by = c("state_residence", "out_of_state"))
md_abortions |>
summarise(across(where(is.numeric), sum, na.rm = TRUE)) |>
mutate(change = patients_2023-patients_2019, pct_change = change/patients_2019)
md_abortions |>
group_by(out_of_state) |>
summarise(across(where(is.numeric), sum, na.rm = TRUE)) |>
mutate(change = patients_2023-patients_2019, pct_change = change/patients_2019)
md_abortions |>
summarise(sum(patients_2019))
View(md_abortions)
md_abortions <- md_abortions |>
mutate(change = patients_2023-patients_2019) |>
select(state_residence, patients_2019, patients_2023, change, out_of_state)
md_abortions <- md_abortions |>
mutate(change = patients_2023-patients_2019) |>
select(state_residence, patients_2019, patients_2023, change, out_of_state)
md_abortions <- md_abortions |>
mutate(change = patients_2023-patients_2019) |>
select(state_residence, patients_2019, patients_2023, change, out_of_state)
md_abortions
md_abortions <- md_abortions |>
mutate(change = patients_2023-patients_2019) |>
select(state_residence, patients_2019, patients_2023, change, out_of_state)
md_abortions |>
arrange(desc(change))
travel_2019_totals <- travel_2019_clean |>
rowwise() |>
mutate(
# Get the in-state count from the corresponding state column
in_state_2019 = if_else(!is.na(cur_data()[[state_occurrence]]),
cur_data()[[state_occurrence]],
0)) |>
select(-mexico, -canada, -othercountries)
travel_2019_totals <- travel_2019_totals |>
mutate(total_patients_2019 = sum(across(ak:wy), na.rm = TRUE), out_of_state_2019 = total_patients_2019-in_state_2019, pct_out_of_state_2019 = round(out_of_state_2019/total_patients_2019, 2))
total_abortions_2019 <- travel_2019_totals |>
select(state_occurrence, in_state_2019, out_of_state_2019, total_patients_2019, pct_out_of_state_2019)
travel_2023_clean <- travel_2023 |>
mutate(state_occurrence = str_to_lower(state_occurrence), across(-state_occurrence, as.double)) |>
select(-other_country_territory) |>
mutate(state_occurrence = str_trim(state_occurrence)) |>
rename_with(~ str_remove(., "_residence"), -state_occurrence, ~ str_trim(.), -state_occurrence)
travel_2023_totals <- travel_2023_clean |>
rowwise() |>
mutate(
# Get the in-state count from the corresponding state column
in_state_2023 = if_else(!is.na(cur_data()[[state_occurrence]]),
cur_data()[[state_occurrence]],
0))
travel_2023_totals <- travel_2023_totals |>
mutate(total_patients_2023 = sum(across(ak:wy), na.rm = TRUE), out_of_state_2023 = total_patients_2023-in_state_2023, pct_out_of_state_2023 = round(out_of_state_2023/total_patients_2023, 2))
total_abortions_2023 <- travel_2023_totals |>
select(state_occurrence, in_state_2023, out_of_state_2023, total_patients_2023, pct_out_of_state_2023)
total_abortions <- full_join(total_abortions_2019, total_abortions_2023, by = "state_occurrence")
states_2019 <- total_abortions_2019 |>
select(state_occurrence) %>%
distinct() %>%
pull(state_occurrence)
states_2023 <- total_abortions_2023 %>%
select(state_occurrence) %>%
distinct() %>%
pull(state_occurrence)
# Find states present in 2019 but missing in 2024
missing_states <- setdiff(states_2019, states_2023)
missing_states
total_abortions <-
total_abortions |>
mutate(total_change = total_patients_2023 - total_patients_2019, total_pct_increase = round(total_change/total_patients_2019,2), out_of_state_change = out_of_state_2023 - out_of_state_2019, pct_change_out_of_state = round(out_of_state_change/out_of_state_2019,2))
View(total_abortions)
total_abortions |>
select(state_occurrence, total_change, total_pct_increase, out_of_state_change, pct_change_out_of_state)
total_abortions_totals <- total_abortions |>
select(state_occurrence, total_change, total_pct_increase, out_of_state_change, pct_change_out_of_state)
total_abortions_totals <- total_abortions |>
select(state_occurrence, total_change, total_pct_increase, out_of_state_change, pct_change_out_of_state)
total_abortions_totals
View(total_abortions_totals)
View(total_abortions)
View(total_abortions_2019)
View(total_abortions_2023)
View(total_abortions_totals)
write_csv(md_abortions, "md_abortions.csv")
chemicals_of_interest_derailments <- derailments |>
filter(str_detect(commodity_long_name, "AMMONIA|CHLORINE|SULFUR DIOXIDE|HYDROGEN FLUORIDE|FUMING NITRIC ACID|SULFURIC ACID"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(lubridate)
#install.packages("leaflet")
#install.packages("tidygeocoder")
#install.packages("htmlwidgets")
library(leaflet)
library(tidygeocoder)
library(htmlwidgets)
library(sf)
df <- read_csv("current_open_refined_Incident-Report-All-fields-included-in-Form-5800-csv.csv") %>%
clean_names() %>%
mutate(incident_year = year(date_of_incident))
deduped_df <- df %>%
arrange(report_number) %>%  # Arrange by report_number
group_by(report_number) %>% # Group by report_number
slice_tail(n = 1) %>%       # Select only the last instance of each report_number
ungroup()                   # Ungroup the dataframe
df_14_24 <- deduped_df %>%
filter(incident_year >= 2014) |>
mutate(causes_of_failure_lower = tolower(causes_of_failure),
incident_city = tolower(incident_city))
derailments <- df_14_24 |>
filter(str_detect(causes_of_failure_lower, "derailment"))
serious_derailments <- derailments |>
filter(serious_indicator == "Yes")
derailments
serious_derailments
derailment_year_counts <- derailments |>
group_by(incident_year) |>
summarise(count=n())
serious_derailment_year_counts <- serious_derailments |>
group_by(incident_year) |>
summarise(count=n())
ggplot(derailment_year_counts, aes(x = incident_year, y = count)) +
geom_line(color = "red") +    # Set line color to red
geom_point() +                # Add points for each year
scale_x_continuous(breaks = seq(min(derailment_year_counts$incident_year), max(derailment_year_counts$incident_year), by = 5)) +  # Set x-axis ticks every 5 years
labs(title = "Counts of Incidents by Year", x = "Year", y = "Count") +
theme_minimal()
ggplot(serious_derailment_year_counts, aes(x = incident_year, y = count)) +
geom_line(color = "red") +    # Set line color to red
geom_point() +                # Add points for each year
scale_x_continuous(breaks = seq(min(serious_derailment_year_counts$incident_year), max(serious_derailment_year_counts$incident_year), by = 5)) +  # Set x-axis ticks every 5 years
labs(title = "Counts of Incidents by Year", x = "Year", y = "Count") +
theme_minimal()
derailments |>
group_by(fatalities_indicator) |>
summarise(count=n())
derailments |>
group_by(hazmat_injury_indicator) |>
summarise(count=n())
serious_derailments |>
group_by(hazmat_injury_indicator) |>
summarise(count=n())
df_14_24 |>
group_by(incident_state) |>
summarise(count=n()) |>
mutate(percent = count/5024*100) |>
arrange(desc(count))
derailments |>
group_by(incident_state) |>
summarise(count=n()) |>
mutate(percent = count/169*100) |>
arrange(desc(count))
serious_derailments |>
group_by(incident_state) |>
summarise(count=n()) |>
mutate(percent = count/117*100) |>
arrange(desc(count))
df_14_24 |>
group_by(incident_city, incident_state) |>
summarise(count=n()) |>
mutate(percent = count/5024*100) |>
arrange(desc(count), incident_state)
derailments |>
group_by(incident_city, incident_state) |>
summarise(count=n()) |>
mutate(percent = count/169*100) |>
arrange(desc(count), incident_state)
serious_derailments |>
group_by(incident_city, incident_state) |>
summarise(count=n()) |>
mutate(percent = count/117*100) |>
arrange(desc(count), incident_state)
df_14_24 %>%
group_by(carrier_reporter_name_clean) %>%
summarise(count = n()) |>
mutate(percent = count/5024*100) |>
arrange(desc(count))
derailments %>%
group_by(carrier_reporter_name_clean) %>%
summarise(count = n()) |>
mutate(percent = count/169*100) |>
arrange(desc(count))
serious_derailments %>%
group_by(carrier_reporter_name_clean) %>%
summarise(count = n()) |>
mutate(percent = count/117*100) |>
arrange(desc(count))
df_14_24 |>
group_by(shipper_name) |>
summarise(count = n()) |>
mutate(percent = count/5024*100) |>
arrange(desc(count))
derailments |>
group_by(shipper_name) |>
summarise(count = n()) |>
mutate(percent = count/169*100) |>
arrange(desc(count))
serious_derailments |>
group_by(shipper_name) |>
summarise(count = n()) |>
mutate(percent = count/117*100) |>
arrange(desc(count))
hazmats <- read_csv("most_common_hazmats.csv") |>
clean_names() |>
rename(commodity_long_name = unna_definition, materials_moved = n) |>
mutate(commodity_long_name = toupper(commodity_long_name),
total_materials_moved = sum(materials_moved),
pct_of_total_moved = round(materials_moved / total_materials_moved * 100, 3))
df_14_24 |>
filter(!str_detect(commodity_long_name, regex("petroleum|gasoline", ignore_case = TRUE))) |>
group_by(hazardous_class) |>
summarise(count=n()) |>
arrange(desc(count))
derailments |>
filter(!str_detect(commodity_long_name, regex("petroleum|gasoline", ignore_case = TRUE))) |>
group_by(hazardous_class) |>
summarise(count=n()) |>
arrange(desc(count))
serious_derailments |>
filter(!str_detect(commodity_long_name, regex("petroleum|gasoline", ignore_case = TRUE))) |>
group_by(hazardous_class) |>
summarise(count=n()) |>
arrange(desc(count))
hazmats |>
group_by(hazmat_class) |>
summarise(total_materials_moved = sum(materials_moved)) |>
arrange(desc(total_materials_moved))
chemicals_all_accidents <- df_14_24 |>
filter(!str_detect(commodity_long_name, regex("petroleum|gasoline", ignore_case = TRUE))) |>
group_by(commodity_long_name, hazardous_class) |>
summarise(all_accidents_count = n()) |>
mutate(all_accidents_percent = round(all_accidents_count/5024*100,3))
chemicals_derailments <- derailments |>
filter(!str_detect(commodity_long_name, regex("petroleum|gasoline", ignore_case = TRUE))) |>
group_by(commodity_long_name, hazardous_class) |>
summarise(derailment_count = n()) |>
mutate(derailment_percent = round(derailment_count/169*100, 3))
chemicals_serious_derailments <- serious_derailments |>
filter(!str_detect(commodity_long_name, regex("petroleum|gasoline", ignore_case = TRUE))) |>
group_by(commodity_long_name, hazardous_class) |>
summarise(serious_derailment_count = n()) |>
mutate(serious_derailment_percent = round(serious_derailment_count/117*100, 3))
chemicals_accidents_percentages <- full_join(chemicals_all_accidents, chemicals_derailments, by = "commodity_long_name") |>
full_join(chemicals_serious_derailments, by = "commodity_long_name")
chemicals_accidents_percentages |>
arrange(desc(derailment_percent))
chemicals_all_accidents |>
filter(!str_detect(commodity_long_name, regex("alcohol", ignore_case = TRUE))) |>
arrange(desc(all_accidents_count))
chemicals_derailments |>
filter(!str_detect(commodity_long_name, regex("alcohol", ignore_case = TRUE))) |>
arrange(desc(derailment_count))
chemicals_serious_derailments |>
filter(!str_detect(commodity_long_name, regex("alcohol", ignore_case = TRUE))) |>
arrange(desc(serious_derailment_count))
hazmats |>
arrange(desc(materials_moved))
derailments |>
group_by(what_failed) |>
summarise(count=n()) |>
arrange(desc(count))
serious_derailments |>
group_by(what_failed) |>
summarise(count=n()) |>
arrange(desc(count))
derailments |>
group_by(what_failed, how_failed) |>
summarise(count=n()) |>
arrange(desc(count))
serious_derailments |>
group_by(what_failed, how_failed) |>
summarise(count=n()) |>
arrange(desc(count))
derailments |>
group_by(incident_result) |>
summarise(count=n()) |>
arrange(desc(count))
serious_derailments |>
group_by(incident_result) |>
summarise(count=n()) |>
arrange(desc(count))
derailments |>
filter(!str_detect(commodity_long_name, regex("alcohol", ignore_case = TRUE))) |>
group_by(commodity_long_name, incident_result) |>
summarise(count=n()) |>
arrange(desc(count))
serious_derailments |>
filter(!str_detect(commodity_long_name, regex("alcohol", ignore_case = TRUE))) |>
group_by(commodity_long_name, incident_result) |>
summarise(count=n()) |>
arrange(desc(count))
derailments |>
filter(hazmat_injury_indicator == "Yes")
derailment_cities <- derailments |>
select(report_number, incident_city, incident_state, serious_indicator) |>
mutate(city = incident_city, state = incident_state)
cities_with_coords <- derailment_cities %>%
geocode(city = city, state = state, method = "osm")
print(cities_with_coords)
cities_with_coords <-cities_with_coords |>mutate(color = ifelse(serious_indicator == "Yes", "red", "blue"))
# Create leaflet map with tooltips
m <- leaflet() %>%
addTiles() %>%  # Add default map tiles
addCircleMarkers(
data = cities_with_coords,
~long, ~lat,
color = ~color,
radius = 6,
popup = ~paste("Incident: ", serious_indicator),  # Popup when clicked
label = ~city,  # Tooltip on mouse hover showing the city name
labelOptions = labelOptions(noHide = FALSE, direction = 'auto')  # Tooltip options
)
# Display the map
m
saveWidget(m, "derailment_map.html")
derailments |>
filter(!str_detect(commodity_long_name, regex("petroleum|gasoline|alcohol", ignore_case = TRUE))) |>
group_by(cont1_material_of_construction) |>
summarise(count=n()) |>
arrange(desc(count))
derailments |>
filter(!str_detect(commodity_long_name, regex("petroleum|gasoline|alcohol", ignore_case = TRUE))) |>
group_by(identification_markings) |>
summarise(count=n()) |>
arrange(desc(count))
derailments |>
filter(!str_detect(commodity_long_name, regex("petroleum|gasoline|alcohol", ignore_case = TRUE))) |>
group_by(cont1_packaging_type) |>
summarise(count=n()) |>
arrange(desc(count))
cat_3_derailments <- derailments |>
filter(hazardous_class == 3.0)
cat_3_derailments
cat_3_derailment_year_counts <- cat_3_derailments |>
group_by(incident_year) |>
summarise(count=n())
ggplot(cat_3_derailment_year_counts, aes(x = incident_year, y = count)) +
geom_line(color = "red") +    # Set line color to red
geom_point() +                # Add points for each year
scale_x_continuous(breaks = seq(min(cat_3_derailment_year_counts$incident_year), max(cat_3_derailment_year_counts$incident_year), by = 5)) +  # Set x-axis ticks every 5 years
labs(title = "Counts of Incidents by Year", x = "Year", y = "Count") +
theme_minimal()
cat_3_derailments  |>
group_by(hazmat_injury_indicator) |>
summarise(count=n())
cat_3_derailments |>
filter(hazmat_injury_indicator == "Yes")
cat_3_derailments |>
group_by(incident_state) |>
summarise(count=n()) |>
mutate(percent = count/83*100) |>
arrange(desc(count))
cat_3_derailments |>
group_by(incident_city, incident_state) |>
summarise(count=n()) |>
mutate(percent = count/83*100) |>
arrange(desc(count))
cat_3_derailment_cities <- cat_3_derailments |>
select(report_number, incident_city, incident_state, serious_indicator) |>
mutate(city = incident_city, state = incident_state)
cat_3_cities_with_coords <- cat_3_derailment_cities %>%
geocode(city = city, state = state, method = "osm")
cat_3_cities_with_coords <- cat_3_cities_with_coords |>
mutate(color = ifelse(serious_indicator == "Yes", "red", "blue"))
# Create leaflet map with tooltips
m_cat3 <- leaflet() %>%
addTiles() %>%  # Add default map tiles
addCircleMarkers(
data = cat_3_cities_with_coords,
~long, ~lat,
color = ~color,
radius = 6,
popup = ~paste("Incident: ", serious_indicator),  # Popup when clicked
label = ~city,  # Tooltip on mouse hover showing the city name
labelOptions = labelOptions(noHide = FALSE, direction = 'auto')  # Tooltip options
)
# Display the map
m_cat3
cat_3_derailments %>%
group_by(carrier_reporter_name_clean) %>%
summarise(count = n()) |>
mutate(percent = count/5024*100) |>
arrange(desc(count))
cat_3_derailments |>
group_by(shipper_name) |>
summarise(count = n()) |>
arrange(desc(count))
derailments |>
filter(!str_detect(commodity_long_name, regex("petroleum|gasoline", ignore_case = TRUE))) |>
group_by(hazardous_class) |>
summarise(count=n()) |>
arrange(desc(count))
hazmats |>
group_by(hazmat_class) |>
summarise(total_materials_moved = sum(materials_moved)) |>
arrange(desc(total_materials_moved))
cat_3_derailments |>
filter(!str_detect(commodity_long_name, regex("petroleum|gasoline", ignore_case = TRUE))) |>
group_by(commodity_long_name) |>
summarise(all_accidents_count = n()) |>
mutate(all_accidents_percent = round(all_accidents_count/83*100,3)) |>
arrange(desc(all_accidents_percent))
cat_3_derailments |>
filter(!str_detect(commodity_long_name, regex("petroleum|gasoline|alcohol", ignore_case = TRUE))) |>
group_by(commodity_long_name) |>
summarise(all_accidents_count = n()) |>
mutate(all_accidents_percent = round(all_accidents_count/83*100,3)) |>
arrange(desc(all_accidents_percent))
cat_3_derailments |>
group_by(what_failed) |>
summarise(count=n()) |>
arrange(desc(count))
cat_3_derailments |>
group_by(what_failed, how_failed) |>
summarise(count=n()) |>
arrange(desc(count))
cat_3_derailments |>
group_by(incident_result) |>
summarise(count=n()) |>
arrange(desc(count))
cat_3_derailments |>
filter(!str_detect(commodity_long_name, regex("alcohol", ignore_case = TRUE))) |>
group_by(commodity_long_name, incident_result) |>
summarise(count=n()) |>
arrange(desc(count))
cat_3_derailments |>
filter(hazmat_injury_indicator == "Yes")
chemicals_of_interest_derailments <- derailments |>
filter(str_detect(commodity_long_name, "AMMONIA|CHLORINE|SULFUR DIOXIDE|HYDROGEN FLUORIDE|FUMING NITRIC ACID|SULFURIC ACID"))
chemicals_of_interest_derailments |>
group_by(commodity_long_name) |>
summarise(count=n())
ammonia_derailments <- derailments |>
filter(str_detect(commodity_long_name, "AMMONIA"))
ammonia_derailments
sulfur_derailments <- derailments |>
filter(str_detect(commodity_long_name, "SULFUR"))
sulfur_derailments |>
group_by(commodity_long_name) |>
summarise(count=n())
sulfur_derailments |>
filter(str_detect(commodity_long_name, "SULFURIC ACID"))
chemicals_of_interest_derailments <- derailments |>
filter(str_detect(commodity_long_name, "AMMONIA|CHLORINE|SULFUR DIOXIDE|HYDROGEN FLUORIDE|FUMING NITRIC ACID|SULFURIC ACID"))
chemicals_of_interest_derailments |>
group_by(commodity_long_name) |>
summarise(count=n())
write_csv(chemicals_of_interest_derailments, "chemicals_interest_derailments_DOT.csv")
early_voting <- read_csv("earlyVoting RAW data.csv")
library(tidyverse)
library(janitor)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
early_voting <- read_csv("earlyVoting RAW data.csv")
early_voting <- read_csv("EarlyVoting RAW data.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
early_voting <- read_csv("EarlyVoting RAW data.csv")
setwd("~/data_journalism/cns_data/cns/early_votes_story")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
early_voting <- read_csv("EarlyVoting RAW data.csv")
early_voting <- read_csv("EarlyVoting RAW data.csv") |>
clean_names()
early_voting
early_voting |>
group_by(gender_code, age_group) |>
summarise(count=n()) |>
arrange(desc(count))
gender_age <- early_voting |>
group_by(gender_code, age_group) |>
summarise(count=n()) |>
arrange(desc(count))
gender_party <- early_voting |>
group_by(gender_code, party_code) |>
summarise(count=n()) |>
arrange(desc(count))
gender_county <- early_voting |>
group_by(gender_code, county_name) |>
summarise(count=n()) |>
arrange(desc(count))
gender_age <- early_voting |>
group_by(gender_code, age_group) |>
summarise(count=n())
gender_party <- early_voting |>
group_by(gender_code, party_code) |>
summarise(count=n())
gender_county <- early_voting |>
group_by(gender_code, county_name) |>
summarise(count=n())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
early_voting <- read_csv("EarlyVoting RAW data.csv") |>
clean_names()
gender_age <- early_voting |>
group_by(gender_code, age_group) |>
summarise(count=n())
gender_party <- early_voting |>
group_by(gender_code, party_code) |>
summarise(count=n())
gender_county <- early_voting |>
group_by(gender_code, county_name) |>
summarise(count=n())
View(gender_age)
View(gender_county)
View(gender_party)
